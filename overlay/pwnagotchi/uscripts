#!/bin/bash -e

# debian image builder
export OVERLAY_DIR=/root/userscripts

run_function0 (){
    echo "============ Function 0"
    # if this is in the chroot, so build the pwny
    echo "# arguments called with ---->  ${@}     "
    echo "# path to me --------------->  ${0}     "
    echo "# parent path -------------->  ${0%/*}  "
    echo "# my name ------------------>  ${0##*/} "
    echo "Building in $(pwd)"

    figlet board.txt

    # predictable net names
    sed -i "s/net.ifnames=0//" board.txt

    # update FDTOVERLAYS
    sed -i "/^EXTLINUX_FDTOVERLAYS=/d" board.txt
    tee -a board.txt <<EOF
EXTLINUX_FDTOVERLAYS="# for Bananapi M4Zero V1 (realtek wifi)
	fdtoverlays ../allwinner/overlays/sunxi-h616-i2c4.dtbo ../allwinner/overlays/sunxi-h616-spi1-cs1-spidev.dtbo ../allwinner/overlays/sunxi-h616-pg-6-7-uart1.dtbo
	# for Bananapi M4Zero V2 (brcmfmac wifi)
       	#fdtoverlays ../allwinner/overlays/sunxi-h618-bananapi-m4-sdio-wifi-bt.dtbo ../allwinner/overlays/sunxi-h616-spi1-cs1-spidev.dtbo ../allwinner/overlays/sunxi-h616-pi-13-14-uart4.dtbo ../allwinner/overlays/sunxi-h616-i2c0.dtbo"
EOF

}

run_function1 (){
    echo
    echo ">>>>> ---- >>>>> Function 1"
    echo "Building in $(pwd)"
    
    echo "Listing drives: (P_VALUE = ${P_VALUE})"
    ls -l p1 p2 || true

    echo
    export ROOTFS_DIR="$(pwd)/${P_VALUE}" # set the pi-gen compatible root variable for run scripts
    export OVERLAY_DIR=/root/userscripts
    export PWNY_BUILD_ARTIFACTS=${PWNY_BUILD_ARTIFACTS:-"/root/artifacts/deb-img-builder/$BOARD/$HOSTNAME"}
    export PWNY_ARTIFACT_SUB="deb-img-builder/$BOARD/$HOSTNAME"

    if [ ! -e ${ROOTFS_DIR}/root/overlay/pwnagotchi ]; then
	mkdir -p ${ROOTFS_DIR}/root/overlay
	ln -s ${OVERLAY_DIR} ${ROOTFS_DIR}/root/overlay/pwnagotchi
    fi


    export PI_GEN=deb-img-builder
    printenv
    pushd files/userscripts
    files=''
    for s in $(find . -name '[0-9][0-9]-packages' | sort -V ); do
	if [[ -f $(dirname $s)/SKIP ]]; then
	    echo "-- SKIPping $s"
	else
	    echo "-- Install $(wc -l $s) from $s"
	    files="${files} $(cat $s)"
	fi
	USER_PKGS="$USER_PKGS ${files}"
    done

    echo "+ Running 00-run.sh install scripts locally ($(pwd))"
    for s in $(find . -name '00-run.sh' | sort -V); do
	if [[ -f $(dirname $s)/SKIP ]]; then
	    echo "-- SKIPping $s"
	else
	    echo "-> Running local $s"
	    figlet "# $s" || true
	    pushd $(dirname $s)
            STATIC=${STATIC} /bin/bash -e $(basename $s)
	    popd
	fi
    done
    popd
    
    FILEDEST=${P_VALUE}/tmp/overlay/pwnagotchi
    mkdir -p ${FILEDEST}
    cp -rp files/userscripts/files ${FILEDEST}
    ls -lR ${FILEDEST}
}

run_function2 (){    
    echo "===========  Function 2"
    # this is in the chroot, so build the pwny
    echo "# arguments called with ---->  ${@}     "
    echo "# path to me --------------->  ${0}     "
    echo "# parent path -------------->  ${0%/*}  "
    echo "# my name ------------------>  ${0##*/} "
    echo "Building in $(pwd)"

    # figure this out from config somehow
    export BOARD=bananapim4zero

    ls -l ${0%/*}
    cd ${0%/*}
    ls -l userscripts/

    export PI_GEN=deb-img-builder
    export PWNY_DIR="$(pwd)/userscripts"
    export OVERLAY_DIR=/root/userscripts
    export PWNY_BUILD_ARTIFACTS=${PWNY_BUILD_ARTIFACTS:-"/root/artifacts/deb-img-builder/$BOARD/$HOSTNAME"}

    printenv | cut -c -$(/usr/bin/tput cols)

    if ls /root/linux-*.deb; then
	echo "+++ Installing linux headers"
	ls -l /lib
	dpkg -i /root/linux-*.deb
    fi
    echo "Linux versions available:"
    ls -l /lib/modules
    echo "* Holding linux-headers to avoid installing headers for host kernel"
    apt-mark hold linux-headers-arm64

    echo "+++ apt update"
    apt-get -yq --allow-releaseinfo-change update
    apt-get -yq upgrade
    apt-get -yq install figlet

    ls -l /lib/modules
    
    pushd userscripts
    files=''
    for s in $(find . -name '[0-9][0-9]-packages' | sort -V ); do
	if [[ -f $(dirname $s)/SKIP ]]; then
	    echo "-- SKIPping $s"
	else
	    echo "-- Install $(wc -l $s) from $s"
	    files="${files} $(cat $s)"
	fi
    done
    echo "+ Installing apt packages: $(echo ${files} | sort -u)"
    apt-get -y -q install $(echo ${files} | sort -u)

    files=''
    for s in $(find . -name '[0-9][0-9]-packages-nr' | sort -V ); do
	if [[ -f $(dirname $s)/SKIP ]]; then
	    echo "-- SKIPping $s"
	else
	    echo "-- Install $(wc -l $s) from $s"
	    files="${files} $(cat $s)"
	fi
    done
    echo "+ Installing apt packages: $(echo ${files} | sort -u)"
    apt-get -y -q install --no-install-recommends $(echo ${files} | sort -u)

    echo "+ Running run-chroot install scripts"
    for s in $(find . -name '[0-9][0-9]-*-chroot.sh' | sort -V); do
	if [[ -f $(dirname $s)/SKIP ]]; then
	    echo "-- SKIPping $s"
	elif [[ "$(basename $s)" =~ "-chroot.sh" ]]; then
	    echo "-> Running ${STATIC} $s"
	    figlet "chroot# $(dirname $s)" || true
            ${STATIC} -E STATIC=${STATIC},BOARD=${BOARD} /bin/bash -e $s
	else
	    echo "-> Running local $s"
	    figlet "# $s" || true
	    pushd $(dirname $s)
            STATIC=${STATIC} /bin/bash -e $(basename $s)
	    popd
	fi
    done
    popd
    echo "% unholding linux-headers-arm64"
    apt-mark unhold linux-headers-arm64
    apt -y autoremove
    echo "----- End of function2"

}

run_function3 (){
    echo "============== Function 3"
    echo "# arguments called with ---->  ${@}     "
    echo "# path to me --------------->  ${0}     "
    echo "# parent path -------------->  ${0%/*}  "
    echo "# my name ------------------>  ${0##*/} "
    echo "# P_VALUE = ${P_VALUE}"
    echo "Building in $(pwd)"
    #ls -l
    #echo Environment
    #printenv

    if [ -d p1/boot ]; then
	boot_dir="p1/boot"
	root_dir="p1"
    else
	boot_dir="p1"
	root_dir="p2"
    fi

    export PI_GEN=deb-img-builder
    export ROOTFS_DIR="$(pwd)/${P_VALUE}" # set the pi-gen compatible root variable for run scripts
    export OVERLAY_DIR=/root/userscripts
    export PWNY_BUILD_ARTIFACTS=${PWNY_BUILD_ARTIFACTS:-"/root/artifacts/deb-img-builder/$BOARD/$HOSTNAME"}

    pushd files/userscripts
    echo "+ Running remaining *-run.sh install scripts locally"
    for s in $(find . -name '*-run.sh' | sort -V); do
	if [[ -f $(dirname $s)/SKIP ]]; then
	    echo "-- SKIPping $s"
	elif [[ "$(basename $s)" =~ "00-run.sh" ]]; then
	    # already ran these in run_function1
	    echo "= already ran $s"
	else
	    echo "-> Running local $(dirname $s)"
	    pushd $(dirname $s)
            STATIC=${STATIC} /bin/bash -e $(basename $s)
	    popd
	fi
    done
    popd

    if [ -d ${ROOTFS_DIR}/root/overlay ]; then
	rm -rf ${ROOTFS_DIR}/root/overlay
    fi
    
    ls -lR ${boot_dir} || true
    echo "Listing mounts"
    losetup -l
    mount | grep -i loop

    # install /etc/rc.local
    ls ${root_dir}/home/pwnagotchi/git/pwnagotchi/builder/data/etc || true
    if [ -f ${root_dir}/home/pwnagotchi/git/pwnagotchi/builder/data/etc/rc.local ]; then
	echo "Installing rc.local"
	cp ${root_dir}/home/pwnagotchi/git/pwnagotchi/builder/data/etc/rc.local ${root_dir}/etc/rc.local
    fi

    # install dtb mods    
    for dts in $(cd files/userscripts/files ; find . -name \*.dts); do
	dtb="${boot_dir}/$(dirname ${dts})/$(basename ${dts} .dts).dtb"
	if [[ "${dts}" = *"/overlays/"* ]]; then
	    dtb=${dtb}o
	fi
	mkdir -p "$(dirname ${dtb})"
	echo "* Compiling ${dts} to ${dtb}"
	if [ -f "${dtb}" -a ! -f "${dtb}.ORIG" ]; then
	    echo "- Backing up original"
	    mv ${dtb} ${dtb}.ORIG
	fi
	    
	/usr/bin/dtc -I dts -O dtb -o "${dtb}" "files/userscripts/files/${dts}" || true
    done
    ls -lR ${boot_dir}/allwinner
    
}


