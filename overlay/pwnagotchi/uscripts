#!/bin/bash -e

# debian image builder

run_function0 (){
    echo "============ Function 0"
    # if this is in the chroot, so build the pwny
    echo "# arguments called with ---->  ${@}     "
    echo "# path to me --------------->  ${0}     "
    echo "# parent path -------------->  ${0%/*}  "
    echo "# my name ------------------>  ${0##*/} "
    echo "Building in $(pwd)"

    ls -l files/userscripts/

    #printenv 

}

run_function1 (){
    echo
    echo ">>>>> ---- >>>>> Function 1"
    echo "Building in $(pwd)"
    echo "Adding FDTOVERLAYS"
    FDTOVERLAYS="fdtoverlays"
    for ol in disable-uart5 gpu pg-i2c4 pg-uart1 ph-i2c1 spi0-spidev spi1-cs1-spidev; do
	echo "- ${ol}"
	FDTOVERLAYS="${FDTOVERLAYS} ../allwinner/overlays/sun50i-h616-${ol}.dtbo"
    done
    
    if [ -f board.txt ]; then
	echo "Adding overlays"
	sed -i "s#^FDTOVERLAYS=.*#FDTOVERLAYS='${FDTOVERLAYS}'#" board.txt
	echo "Result:"
	grep fdtoverlays board.txt
    fi

    echo "Listing drives:"
    ls -l p1 p2 || true

    echo
    echo "Listing old files:"
    if [ -d p2/tmp ]; then
	FILEDEST=p2/tmp/overlay/pwnagotchi
    elif [ -d p1/tmp ]; then
	FILEDEST=p1/tmp/overlay/pwnagotchi
    fi
    mkdir -p ${FILEDEST}
    cp -rp files/userscripts/files ${FILEDEST}
    ls -lR ${FILEDEST}
}

run_function2 (){    
    echo "===========  Function 2"
    # this is in the chroot, so build the pwny
    echo "# arguments called with ---->  ${@}     "
    echo "# path to me --------------->  ${0}     "
    echo "# parent path -------------->  ${0%/*}  "
    echo "# my name ------------------>  ${0##*/} "
    echo "Building in $(pwd)"

    # figure this out from config somehow
    export BOARD=bananapim4zero

    ls -l ${0%/*}
    cd ${0%/*}
    ls -l userscripts/

    export PWNY_DIR="$(pwd)/userscripts"

    printenv | cut -c -$(/usr/bin/tput cols)

    echo "+++ Installing linux headers"
    ls -l /lib
    # install dkms alone, without installing host-OS linux headers
    apt-get -q install --no-install-recommends dkms
    dpkg -i /root/linux-*.deb
    ls -l /lib/modules

    echo "+++ apt update"
    apt-get -yq --allow-releaseinfo-change update
    apt-get -yq upgrade
    ls -l /lib/modules
    
    pushd userscripts
    files=''
    for s in $(find . -name '[0-9][0-9]-packages' | sort -V ); do
	if [[ -f $(dirname $s)/SKIP ]]; then
	    echo "-- SKIPping $s"
	else
	    echo "-- Install $(wc -l $s) from $s"
	    files="${files} $(cat $s)"
	fi
    done
    echo "+ Installing apt packages: $(echo ${files} | sort -u)"
    apt-get -y -q install $(echo ${files} | sort -u)

    echo "+ Running instll scripts"
    for s in $(find . -name '[0-9][0-9]-*.sh' | sort -V); do
	if [[ -f $(dirname $s)/SKIP ]]; then
	    echo "-- SKIPping $s"
	elif [[ "$(basename $s)" =~ "-chroot.sh" ]]; then
	    echo "-> Running ${STATIC} $s"
            ${STATIC} -E STATIC=${STATIC},BOARD=${BOARD} /bin/bash -e $s
	else
	    echo "-> Running local $s"
            STATIC=${STATIC} /bin/bash -e $s
	fi
    done
    popd
    echo "----- End of function2"

}

run_function3 (){
    echo "============== Function 3"
    echo "# arguments called with ---->  ${@}     "
    echo "# path to me --------------->  ${0}     "
    echo "# parent path -------------->  ${0%/*}  "
    echo "# my name ------------------>  ${0##*/} "
    echo "Building in $(pwd)"
    ls -l
    echo Environment
    printenv
    for d in p1 p2 output/* files; do
	echo "Listing ${d}"
	ls -l $d || true
    done

    if [ -d p1/boot ]; then
	boot_dir="p1/boot"
	root_dir="p1"
    else
	boot_dir="p1"
	root_dir="p2"
    fi

    
    ls -lR ${boot_dir} || true
    echo "Listing mounts"
    losetup -l
    mount | grep -i loop

    # install /etc/rc.local
    ls ${root_dir}/home/pwnagotchi/git/pwnagotchi/builder/data/etc || true
    if [ -f ${root_dir}/home/pwnagotchi/git/pwnagotchi/builder/data/etc/rc.local ]; then
	echo "Installing rc.local"
	cp ${root_dir}/home/pwnagotchi/git/pwnagotchi/builder/data/etc/rc.local ${root_dir}/etc/rc.local
    fi

    # install dtb mods    
    for dts in $(cd files/userscripts/files ; find . -name \*.dts); do
	dtb="${boot_dir}/$(dirname ${dts})/$(basename ${dts} .dts).dtb"
	if [[ "${dts}" = *"/overlays/"* ]]; then
	    dtb=${dtb}o
	fi
	mkdir -p "$(dirname ${dtb})"
	echo "* Compiling ${dts} to ${dtb}"
	if [ -f "${dtb}" -a ! -f "${dtb}.ORIG" ]; then
	    echo "- Backing up original"
	    mv ${dtb} ${dtb}.ORIG
	fi
	    
	/usr/bin/dtc -I dts -O dtb -o "${dtb}" "files/userscripts/files/${dts}" || true
    done
    ls -lR ${boot_dir}/allwinner
    
}


